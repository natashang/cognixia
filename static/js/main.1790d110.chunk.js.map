{"version":3,"sources":["components/form_via_class/components/form/form.js","components/form_via_class/components/list/list.js","components/form_via_class/form.js","components/form_via_func/form.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Form","props","onSubmit","value","handleInputSubmit","type","autoFocus","onChange","handleInputChange","id","ListItem","listOfItems","map","item","key","Button","variant","onClick","handleDeleteItem","state","bind","event","this","setState","target","addToList","preventDefault","list","push","index","indexOf","splice","Component","useState","setValue","setList","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1790d110.chunk.js","sourcesContent":["import React from 'react'\r\nimport './form.css'\r\n\r\n\r\nexport default function Form(props) {\r\n    return(\r\n        <form onSubmit={(value) => props.handleInputSubmit(value)} >\r\n            <input value={props.value} type=\"text\" autoFocus onChange={(value) => props.handleInputChange(value)}/>\r\n            <input type=\"submit\" value=\"Add\" id=\"submitButton\"/>            \r\n        </form>\r\n    )    \r\n}\r\n\r\n","import React from 'react'\r\nimport {Button} from 'react-bootstrap'\r\n\r\n\r\nexport default function ListItem(props) {\r\n    return(\r\n        <ul>\r\n                    { props.listOfItems.map( item => {\r\n                        return(\r\n                            <div>\r\n                                <li key={item}>{item} \r\n                                    <Button\r\n                                        variant=\"outline-primary\" \r\n                                        onClick={(item) => props.handleDeleteItem(item)}\r\n                                    >\r\n                                        X\r\n                                    </Button>\r\n                                </li>\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </ul>\r\n    )\r\n}\r\n//export default ListItem;","import React, {Component} from 'react'\r\n\r\n// Splitted the form and list into individual components\r\nimport FormComponent from './components/form/form'\r\nimport ListComponent from './components/list/list'\r\n\r\n\r\n/*\r\n    A class compoment implementation of a form for a To Do List\r\n    Features\r\n        - text input\r\n        - submit button\r\n        - adds the input to a list\r\n        - displays the list\r\n        - deletes items from the list and updates automatically\r\n*/\r\n\r\n// there can only be one default export per file!\r\nexport default class Form extends Component{\r\n\r\n    // setState(): updates the component's state object \r\n    // when the state changes, the component is re-rendered\r\n\r\n    // props: properties, passed to component like parameters\r\n    // state: managed within the component, like variables in a function\r\n\r\n    // mutable state is kept in the component's state property\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            value:'',\r\n            listOfItems: []\r\n        }\r\n        \r\n        this.handleInputChange = this.handleInputChange.bind(this)\r\n        this.handleInputSubmit = this.handleInputSubmit.bind(this)\r\n        this.handleDeleteItem = this.handleDeleteItem.bind(this)\r\n    }\r\n\r\n    /*\r\n        Why no \"function\" keyword?\r\n        - the component Form is class based, so it has METHODS, not FUNCTIONS\r\n        - can also be called this.handleInputChange(input)\r\n        - to define functions in a component, then it should be a functional component\r\n    */\r\n\r\n    /*\r\n        - changing an input field creates an event object\r\n        - so we set the state's value from the event's value\r\n\r\n        in the lexical scope of this specific instance, as \r\n        new letters are inputted, change the state's value\r\n        enter 'f' --> state = f\r\n        then 'fs' --> state = fs\r\n        the state changes with each new inputted character\r\n    */\r\n\r\n    // changes the input text field from, say, \"abac\" to \"\"\r\n    handleInputChange (event) {\r\n        this.setState({value: event.target.value})\r\n    }\r\n\r\n    /*\r\n        here, we take the value from the state because inputting is done\r\n        preventDefault(): prevent a browser reload or refresh\r\n        when submitting a form, the browser reloads\r\n    */\r\n    // when the submit button is clicked, invoking this method, append the input to a list and display\r\n    handleInputSubmit (event) {\r\n        this.addToList(this.state.value)\r\n        this.setState({value: ''})\r\n        event.preventDefault()\r\n    }\r\n\r\n    // takes the inputted value, adds it to a copy of the list, and updates the list\r\n    addToList(item){\r\n        // get a copy\r\n        const list = [...this.state.listOfItems]\r\n        list.push(item)\r\n        this.setState({ listOfItems: list })\r\n    }\r\n\r\n    // deletes a specifieditem from a list\r\n    handleDeleteItem(item){\r\n        //get a copy\r\n        const list = [...this.state.listOfItems]\r\n        const index = list.indexOf(item)\r\n\r\n        // goes to index and removes ONE element\r\n        list.splice(index, 1)\r\n        this.setState( { listOfItems: list})\r\n    }\r\n\r\n    // destructing the Form class object to call the respective methods\r\n    render() {\r\n        return(\r\n            <div>  \r\n                <FormComponent \r\n                    value={this.state.value}\r\n                    handleInputChange={this.handleInputChange}\r\n                    handleInputSubmit={this.handleInputSubmit}\r\n                />                 \r\n                <ListComponent\r\n                    listOfItems={this.state.listOfItems}\r\n                    handleDeleteItem={this.handleDeleteItem}\r\n                />                 \r\n            </div>            \r\n       );\r\n    }\r\n}\r\n","import React, {useState} from 'react'\r\nimport {Button} from 'react-bootstrap'\r\nimport './form.css'\r\n\r\n/*\r\n    A functional compoment implementation of a form for a To Do List\r\n    Features\r\n        - text input\r\n        - submit button\r\n        - adds the input to a list\r\n        - displays the list\r\n        - deletes items from the list and updates automatically\r\n*/\r\n\r\n// there can only be one default export per file!\r\nfunction Form (){\r\n\r\n    // setState(): updates the component's state object \r\n    // when the state changes, the component is re-rendered\r\n\r\n    // props: properties, passed to component like parameters\r\n    // state: managed within the component, like variables in a function\r\n\r\n    // mutable state is kept in the component's state property\r\n    let [value, setValue] = useState('')\r\n    let [listOfItems, setList] = useState([])\r\n    \r\n    /*\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            value:'',\r\n            listOfItems: []\r\n        }\r\n        \r\n        this.handleInputChange = this.handleInputChange.bind(this)\r\n        this.handleInputSubmit = this.handleInputSubmit.bind(this)\r\n    }\r\n    */\r\n\r\n    /*\r\n        Why \"function\" keyword?\r\n        - to define functions in a component, it should be a functional component\r\n    */\r\n\r\n    /*\r\n        - changing an input field creates an event object\r\n        - so we set the state's value from the event's value\r\n\r\n        in the lexical scope of this specific instance, as \r\n        new letters are inputted, change the state's value\r\n        enter 'f' --> state = f\r\n        then 'fs' --> state = fs\r\n        the state changes with each new inputted character\r\n    */\r\n\r\n    // changes the input text field from, say, \"abac\" to \"\"\r\n    function handleInputChange (event){\r\n        setValue( event.target.value)\r\n    }\r\n\r\n    /*\r\n        here, we take the value from the state because inputting is done\r\n        preventDefault(): prevent a browser reload or refresh\r\n        when submitting a form, the browser reloads\r\n    */\r\n    // when the submit button is clicked, invoking this method, append the input to a list and display\r\n    function handleInputSubmit (event) {\r\n        addToList(value)\r\n        setValue('')\r\n        event.preventDefault()\r\n    }\r\n\r\n    // takes the inputted value, adds it to a copy of the list, and updates the list\r\n    function addToList(item){\r\n        // get a copy\r\n        const list = listOfItems\r\n        list.push(item)\r\n        setList(list)\r\n    }\r\n\r\n    // deletes a specifieditem from a list\r\n    function handleDeleteItem(item){\r\n        \r\n        //get a copy\r\n        const list = [...listOfItems]\r\n        const index = list.indexOf(item)\r\n        \r\n        // goes to index and removes ONE element\r\n        list.splice(index, 1)\r\n        setList(list)\r\n    }\r\n\r\n    // destructing the Form class object to call the respective methods\r\n    // render() {\r\n        return(\r\n            <div>  \r\n                <form onSubmit={handleInputSubmit}>\r\n                    <input type=\"text\" value={value} autoFocus onChange={handleInputChange}/>\r\n                    <input type=\"submit\" value=\"Add\" id=\"submitButton\"/>            \r\n                </form>\r\n            \r\n                <ul>\r\n                    { listOfItems.map( item => {\r\n                        return(\r\n                            <div>\r\n                                <li key={item}>{item} \r\n                                    <Button\r\n                                        variant=\"outline-primary\" \r\n                                        onClick={() => handleDeleteItem(item)}\r\n                                    >\r\n                                        X\r\n                                    </Button>\r\n                                </li>\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </ul>\r\n            </div>            \r\n       );\r\n    //}\r\n\r\n}\r\nexport default Form;","import React from 'react';\n\nimport FormViaClass from '../form_via_class/form'\nimport FormViaFunc from '../form_via_func/form'\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Welcome to my To Do app!</h1>\n        <p> Enter some items below with the Form class component with subcomponents Form and List</p>\n        <FormViaClass/>\n        <p> Enter some items below with the Form functional component</p>\n        <FormViaFunc/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}